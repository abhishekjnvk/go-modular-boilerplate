// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: orgs.sql

package sqlc

import (
	"context"
)

const CreateOrg = `-- name: CreateOrg :one
INSERT INTO orgs (id, name, activation_code, vendor_id, website_url, created_by, subscription_grace_day)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, name, activation_code, vendor_id, website_url, created_by, created_at, subscription_grace_day
`

type CreateOrgParams struct {
	ID                   string  `db:"id" json:"id"`
	Name                 string  `db:"name" json:"name"`
	ActivationCode       *string `db:"activation_code" json:"activation_code"`
	VendorID             string  `db:"vendor_id" json:"vendor_id"`
	WebsiteUrl           *string `db:"website_url" json:"website_url"`
	CreatedBy            string  `db:"created_by" json:"created_by"`
	SubscriptionGraceDay *int32  `db:"subscription_grace_day" json:"subscription_grace_day"`
}

func (q *Queries) CreateOrg(ctx context.Context, db DBTX, arg *CreateOrgParams) (*Org, error) {
	row := db.QueryRow(ctx, CreateOrg,
		arg.ID,
		arg.Name,
		arg.ActivationCode,
		arg.VendorID,
		arg.WebsiteUrl,
		arg.CreatedBy,
		arg.SubscriptionGraceDay,
	)
	var i Org
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ActivationCode,
		&i.VendorID,
		&i.WebsiteUrl,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.SubscriptionGraceDay,
	)
	return &i, err
}

const CreateRole = `-- name: CreateRole :one
INSERT INTO roles (id, name, permissions, org_id, is_admin, description, vendor_id, created_by)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, name, permissions, org_id, is_active, is_admin, data_hash, description, vendor_id, created_by, created_at
`

type CreateRoleParams struct {
	ID          string  `db:"id" json:"id"`
	Name        string  `db:"name" json:"name"`
	Permissions []byte  `db:"permissions" json:"permissions"`
	OrgID       string  `db:"org_id" json:"org_id"`
	IsAdmin     *bool   `db:"is_admin" json:"is_admin"`
	Description *string `db:"description" json:"description"`
	VendorID    *string `db:"vendor_id" json:"vendor_id"`
	CreatedBy   string  `db:"created_by" json:"created_by"`
}

func (q *Queries) CreateRole(ctx context.Context, db DBTX, arg *CreateRoleParams) (*Role, error) {
	row := db.QueryRow(ctx, CreateRole,
		arg.ID,
		arg.Name,
		arg.Permissions,
		arg.OrgID,
		arg.IsAdmin,
		arg.Description,
		arg.VendorID,
		arg.CreatedBy,
	)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Permissions,
		&i.OrgID,
		&i.IsActive,
		&i.IsAdmin,
		&i.DataHash,
		&i.Description,
		&i.VendorID,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return &i, err
}

const DeactivateRole = `-- name: DeactivateRole :exec
UPDATE roles 
SET is_active = FALSE
WHERE id = $1
`

func (q *Queries) DeactivateRole(ctx context.Context, db DBTX, id string) error {
	_, err := db.Exec(ctx, DeactivateRole, id)
	return err
}

const GetOrgByActivationCode = `-- name: GetOrgByActivationCode :one
SELECT id, name, activation_code, vendor_id, website_url, created_by, created_at, subscription_grace_day
FROM orgs 
WHERE activation_code = $1
`

func (q *Queries) GetOrgByActivationCode(ctx context.Context, db DBTX, activationCode *string) (*Org, error) {
	row := db.QueryRow(ctx, GetOrgByActivationCode, activationCode)
	var i Org
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ActivationCode,
		&i.VendorID,
		&i.WebsiteUrl,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.SubscriptionGraceDay,
	)
	return &i, err
}

const GetOrgByID = `-- name: GetOrgByID :one
SELECT id, name, activation_code, vendor_id, website_url, created_by, created_at, subscription_grace_day
FROM orgs 
WHERE id = $1
`

func (q *Queries) GetOrgByID(ctx context.Context, db DBTX, id string) (*Org, error) {
	row := db.QueryRow(ctx, GetOrgByID, id)
	var i Org
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ActivationCode,
		&i.VendorID,
		&i.WebsiteUrl,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.SubscriptionGraceDay,
	)
	return &i, err
}

const GetRoleByID = `-- name: GetRoleByID :one
SELECT id, name, permissions, org_id, is_active, is_admin, data_hash, description, vendor_id, created_by, created_at
FROM roles 
WHERE id = $1 AND is_active = TRUE
`

func (q *Queries) GetRoleByID(ctx context.Context, db DBTX, id string) (*Role, error) {
	row := db.QueryRow(ctx, GetRoleByID, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Permissions,
		&i.OrgID,
		&i.IsActive,
		&i.IsAdmin,
		&i.DataHash,
		&i.Description,
		&i.VendorID,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return &i, err
}

const ListRolesByOrg = `-- name: ListRolesByOrg :many
SELECT id, name, permissions, org_id, is_active, is_admin, data_hash, description, vendor_id, created_by, created_at
FROM roles 
WHERE org_id = $1 AND is_active = TRUE
ORDER BY created_at DESC
`

func (q *Queries) ListRolesByOrg(ctx context.Context, db DBTX, orgID string) ([]*Role, error) {
	rows, err := db.Query(ctx, ListRolesByOrg, orgID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Permissions,
			&i.OrgID,
			&i.IsActive,
			&i.IsAdmin,
			&i.DataHash,
			&i.Description,
			&i.VendorID,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateOrg = `-- name: UpdateOrg :one
UPDATE orgs 
SET name = COALESCE($2, name),
    website_url = COALESCE($3, website_url),
    subscription_grace_day = COALESCE($4, subscription_grace_day)
WHERE id = $1
RETURNING id, name, activation_code, vendor_id, website_url, created_by, created_at, subscription_grace_day
`

type UpdateOrgParams struct {
	ID                   string  `db:"id" json:"id"`
	Name                 string  `db:"name" json:"name"`
	WebsiteUrl           *string `db:"website_url" json:"website_url"`
	SubscriptionGraceDay *int32  `db:"subscription_grace_day" json:"subscription_grace_day"`
}

func (q *Queries) UpdateOrg(ctx context.Context, db DBTX, arg *UpdateOrgParams) (*Org, error) {
	row := db.QueryRow(ctx, UpdateOrg,
		arg.ID,
		arg.Name,
		arg.WebsiteUrl,
		arg.SubscriptionGraceDay,
	)
	var i Org
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ActivationCode,
		&i.VendorID,
		&i.WebsiteUrl,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.SubscriptionGraceDay,
	)
	return &i, err
}

const UpdateRole = `-- name: UpdateRole :one
UPDATE roles 
SET name = COALESCE($2, name),
    permissions = COALESCE($3, permissions),
    description = COALESCE($4, description),
    is_admin = COALESCE($5, is_admin)
WHERE id = $1 AND is_active = TRUE
RETURNING id, name, permissions, org_id, is_active, is_admin, data_hash, description, vendor_id, created_by, created_at
`

type UpdateRoleParams struct {
	ID          string  `db:"id" json:"id"`
	Name        string  `db:"name" json:"name"`
	Permissions []byte  `db:"permissions" json:"permissions"`
	Description *string `db:"description" json:"description"`
	IsAdmin     *bool   `db:"is_admin" json:"is_admin"`
}

func (q *Queries) UpdateRole(ctx context.Context, db DBTX, arg *UpdateRoleParams) (*Role, error) {
	row := db.QueryRow(ctx, UpdateRole,
		arg.ID,
		arg.Name,
		arg.Permissions,
		arg.Description,
		arg.IsAdmin,
	)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Permissions,
		&i.OrgID,
		&i.IsActive,
		&i.IsAdmin,
		&i.DataHash,
		&i.Description,
		&i.VendorID,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return &i, err
}
